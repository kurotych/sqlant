version: 2.1

jobs:
  build_musl_and_test_ssl:
    docker:
      - image: cimg/rust:1.83-node
      - image: cimg/postgres:17.1
        environment:
          POSTGRES_USER: sql
          POSTGRES_PASSWORD: sql
          POSTGRES_DB: sql
        entrypoint: bash
        command: >
          -c '
            openssl req -nodes -new -x509 -subj "/CN=localhost" -keyout /tmp/server.key -out /tmp/server.crt &&
            chown postgres /tmp/server.key &&
            chmod 600 /tmp/server.key &&
            exec /docker-entrypoint.sh -c ssl=on -c ssl_cert_file=/tmp/server.crt -c ssl_key_file=/tmp/server.key
          '
    steps:
      - checkout
      - run: sudo apt update
      - run: sudo apt-get install -y musl-tools
      - run: rustup target add x86_64-unknown-linux-musl
      - run: cargo build  --release --target x86_64-unknown-linux-musl
      - run: psql -d $TEST_DATABASE_URL -f ./tests/test_db.sql
      - run: ./target/x86_64-unknown-linux-musl/release/sqlant postgresql://sql:sql@localhost/sql?sslmode=require
    resource_class: small

  run_integration_and_smoke_tests:
    docker:
      - image: cimg/rust:1.83-node
        environment:
          TEST_DATABASE_URL: postgresql://sql:sql@localhost/sql
      - image: cimg/postgres:17.1
        environment:
            POSTGRES_USER: sql
            POSTGRES_PASSWORD: sql
            POSTGRES_DB: sql
      - image: plantuml/plantuml-server:latest
    steps:
      - checkout
      - run: sudo apt update
      - run: sudo apt install -y postgresql-client
      - run: cargo fmt --check
      - run: psql -d $TEST_DATABASE_URL -f ./tests/test_db.sql
      - run: psql -d $TEST_DATABASE_URL -f ./tests/test_schema.sql
      - run: CON_STRING=$TEST_DATABASE_URL cargo test
      - run: cargo build --release

      - run: ./target/release/sqlant $TEST_DATABASE_URL > result.puml
      - run: curl --fail -X POST http://localhost:8080/png --data-binary @result.puml -o test.png

      - run: ./target/release/sqlant $TEST_DATABASE_URL --nn > result.puml
      - run: curl --fail -X POST http://localhost:8080/png --data-binary @result.puml -o test.png

      - run: ./target/release/sqlant $TEST_DATABASE_URL --legend > result.puml
      - run: curl --fail -X POST http://localhost:8080/png --data-binary @result.puml -o test.png

      - run: ./target/release/sqlant $TEST_DATABASE_URL --en > result.puml
      - run: curl --fail -X POST http://localhost:8080/png --data-binary @result.puml -o test.png

      - run: ./target/release/sqlant $TEST_DATABASE_URL -n -e > result.puml
      - run: curl --fail -X POST http://localhost:8080/png --data-binary @result.puml -o test.png

      - run: ./target/release/sqlant $TEST_DATABASE_URL -s test_schema > result.puml
      - run: curl --fail -X POST http://localhost:8080/png --data-binary @result.puml -o test.png

      - run: ./target/release/sqlant $TEST_DATABASE_URL --legend -e --inline-puml-lib > result.puml
      - run: curl --fail -X POST http://localhost:8080/png --data-binary @result.puml -o test.png

        # Mermaid
      - run: npm install -g @mermaid-js/mermaid-cli
      - run: sudo apt install chromium-bsu libnss3 libatk1.0-0 libatk-bridge2.0-0 libcups2 libxcomposite1 libxdamage1

      - run: ./target/release/sqlant $TEST_DATABASE_URL -o mermaid > input.mmd
      - run: mmdc -i input.mmd -o output.png

      - run: ./target/release/sqlant $TEST_DATABASE_URL --nn -o mermaid > input.mmd
      - run: mmdc -i input.mmd -o output.png

      - run: ./target/release/sqlant $TEST_DATABASE_URL --en -o mermaid > input.mmd
      - run: mmdc -i input.mmd -o output.png

      - run: ./target/release/sqlant $TEST_DATABASE_URL -n -e -o mermaid > input.mmd
      - run: mmdc -i input.mmd -o output.png

      - run: ./target/release/sqlant $TEST_DATABASE_URL -s test_schema -o mermaid > input.mmd
      - run: mmdc -i input.mmd -o output.png

    resource_class: small

workflows:
  default:
    jobs:
      - build_musl_and_test_ssl 
      # - test_job
